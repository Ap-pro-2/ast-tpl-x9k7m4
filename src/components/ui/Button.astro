---


interface Props {
  variant?: "primary" | "secondary" | "accent" | "outline" | "ghost" | "warm";
  size?: "sm" | "md" | "lg" | "xl";
  href?: string;
  type?: "button" | "submit" | "reset";
  disabled?: boolean;
  fullWidth?: boolean;
  icon?: "arrow-right" | "search" | "coffee" | "heart" | "star" | "download";
  iconPosition?: "left" | "right";
  loading?: boolean;
  class?: string;
}

const {
  variant = "primary",
  size = "md",
  href,
  type = "button",
  disabled = false,
  fullWidth = false,
  icon,
  iconPosition = "right",
  loading = false,
  class: additionalClasses = "",
} = Astro.props;


const icons = {
  "arrow-right": `<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path></svg>`,
  search: `<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>`,
  coffee: `<div class="w-4 h-4 bg-current rounded-full"></div>`,
  heart: `<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path></svg>`,
  star: `<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path></svg>`,
  download: `<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>`,
};


const loadingSpinner = `<div class="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin"></div>`;


const getVariantStyles = (variant: string) => {
  switch (variant) {
    case 'primary':
      return 'theme-button-primary';
    case 'secondary':
      return 'theme-button-secondary';
    case 'accent':
      return `text-white font-medium transition-all focus:outline-none focus:ring-2 focus:ring-offset-2`;
    case 'outline':
      return `border font-medium transition-all focus:outline-none focus:ring-2 focus:ring-offset-2`;
    case 'ghost':
      return `font-medium transition-all focus:outline-none focus:ring-2 focus:ring-offset-2`;
    case 'warm':
      return `text-white font-medium transition-all focus:outline-none focus:ring-2 focus:ring-offset-2`;
    default:
      return 'theme-button-primary';
  }
};

const sizeClasses = {
  sm: "px-3 py-1.5 text-sm",
  md: "px-4 py-2 text-sm",
  lg: "px-6 py-3 text-base",
  xl: "px-8 py-4 text-lg",
};

const baseClasses = "inline-flex items-center justify-center";

const classNames = [
  baseClasses,
  getVariantStyles(variant),
  sizeClasses[size],
  fullWidth ? "w-full" : "",
  disabled ? "opacity-50 cursor-not-allowed" : "",
  loading ? "cursor-wait" : "",
  additionalClasses,
]
  .filter(Boolean)
  .join(" ");


const isLink = !!href;
---

{
  isLink ? (
    <a
      href={href}
      class={classNames}
      {...(disabled && { "aria-disabled": "true" })}
    >
      <span class="flex items-center gap-2">
        {loading && <Fragment set:html={loadingSpinner} />}
        {icon && iconPosition === "left" && !loading && (
          <Fragment set:html={icons[icon]} />
        )}
        <slot />
        {icon && iconPosition === "right" && !loading && (
          <Fragment set:html={icons[icon]} />
        )}
      </span>
    </a>
  ) : (
    <button type={type} class={classNames} disabled={disabled || loading}>
      <span class="flex items-center gap-2">
        {loading && <Fragment set:html={loadingSpinner} />}
        {icon && iconPosition === "left" && !loading && (
          <Fragment set:html={icons[icon]} />
        )}
        <slot />
        {icon && iconPosition === "right" && !loading && (
          <Fragment set:html={icons[icon]} />
        )}
      </span>
    </button>
  )
}
