---

import { areFormsEnabled, getFormsConfig, getFormById, getFormsByPlacement, type FormConfig } from '../../core/formsLogic';


import {
  getFormFields,
  getFormElementIds,
  getFormSource
} from '../../core/formsLogic';


export interface Props {
  
  placement?: string;
  
  formId?: string;
  
  className?: string;
}

const { placement, formId, className = '' } = Astro.props;




const formsEnabled = await areFormsEnabled();
const formsConfig = await getFormsConfig();


let forms: FormConfig[] = [];
if (formsEnabled) {
  
  if (formId) {
    const form = await getFormById(formId);
    forms = form ? [form] : [];
  } 
  
  else if (placement) {
    forms = await getFormsByPlacement(placement);
  }
  
  else {
    forms = [];
  }
}


const filteredForms = forms;

---

{}

{}
{formsEnabled && filteredForms.length > 0 ? (
  <div class={`universal-forms ${className}`}>
    {filteredForms.map((form) => {
      const formFields = getFormFields(form);
      const elementIds = getFormElementIds(form.id);
      const formSource = getFormSource(placement || 'direct', form.id);
      
      return (
        <div 
          class={`universal-form ${className || ''}`} 
          data-form-type={form.type}
          data-placement={form.placement}
        >
          
          {}
          <div id={elementIds.errorMessage} class={form.type === 'horizontal' ? 'theme-horizontal-form-error' : 'theme-form-error'} style="display: none;">
            Something went wrong. Please try again.
          </div>
          
          {}
          <div id={elementIds.successMessage} class={form.type === 'horizontal' ? 'theme-horizontal-form-success' : 'theme-form-success'} style="display: none;">
            Thank you! Your message has been sent successfully.
          </div>

          {}
          {form.type === 'vertical' && (
            <div class={`theme-form-container ${className || ''}`}>
              <form id={elementIds.form} class="theme-form">
                {formFields.map((fieldConfig) => (
                  <div class="theme-form-field">
                    <label for={fieldConfig.field === 'name' ? elementIds.nameField : fieldConfig.field === 'email' ? elementIds.emailField : elementIds.messageField}>
                      {fieldConfig.label}
                    </label>
                    
                    {fieldConfig.type === 'textarea' ? (
                      <textarea
                        id={fieldConfig.field === 'message' ? elementIds.messageField : ''}
                        name={fieldConfig.field}
                        placeholder={fieldConfig.placeholder}
                        required={fieldConfig.required}
                        class="theme-form-input"
                      ></textarea>
                    ) : (
                      <input
                        type={fieldConfig.type}
                        id={fieldConfig.field === 'name' ? elementIds.nameField : fieldConfig.field === 'email' ? elementIds.emailField : ''}
                        name={fieldConfig.field}
                        placeholder={fieldConfig.placeholder}
                        required={fieldConfig.required}
                        class="theme-form-input"
                      />
                    )}
                    
                    <p 
                      id={fieldConfig.field === 'name' ? elementIds.nameError : fieldConfig.field === 'email' ? elementIds.emailError : elementIds.messageError}
                      class="theme-form-field-error" 
                      style="display: none;"
                    ></p>
                  </div>
                ))}
                
                {}
                <input type="hidden" name="source" value={formSource} />
                
                <button type="submit" class="theme-form-submit" id={elementIds.submitBtn}>
                  {form.buttonText}
                </button>
              </form>
            </div>
          )}

          {}
          {form.type === 'contact' && (
            <div class={`theme-contact-form-container ${className || ''}`}>
              <form id={elementIds.form} class="theme-contact-form">
                <div class="form-fields">
                  {formFields.map((fieldConfig) => (
                    <div class="theme-contact-form-field">
                      <label 
                        class="theme-contact-form-label"
                        for={fieldConfig.field === 'name' ? elementIds.nameField : fieldConfig.field === 'email' ? elementIds.emailField : elementIds.messageField}
                      >
                        {fieldConfig.label}
                      </label>
                      
                      {fieldConfig.type === 'textarea' ? (
                        <textarea
                          id={fieldConfig.field === 'message' ? elementIds.messageField : ''}
                          name={fieldConfig.field}
                          placeholder={fieldConfig.placeholder}
                          required={fieldConfig.required}
                          class="theme-contact-form-input"
                        ></textarea>
                      ) : (
                        <input
                          type={fieldConfig.type}
                          id={fieldConfig.field === 'name' ? elementIds.nameField : fieldConfig.field === 'email' ? elementIds.emailField : ''}
                          name={fieldConfig.field}
                          placeholder={fieldConfig.placeholder}
                          required={fieldConfig.required}
                          class="theme-contact-form-input"
                        />
                      )}
                      
                      <p 
                        id={fieldConfig.field === 'name' ? elementIds.nameError : fieldConfig.field === 'email' ? elementIds.emailError : elementIds.messageError}
                        class="theme-contact-form-field-error" 
                        style="display: none;"
                      ></p>
                    </div>
                  ))}
                  
                  <button type="submit" class="theme-contact-form-submit" id={elementIds.submitBtn}>
                    {form.buttonText}
                  </button>
                </div>
                
                {}
                <input type="hidden" name="source" value={formSource} />
              </form>
            </div>
          )}

          {}
          {form.type === 'horizontal' && form.placement !== 'section5-newsletter' && (
            <div class={`theme-horizontal-form-container ${className || ''}`}>
              <form id={elementIds.form} class="theme-horizontal-form">
                <div class="form-fields">
                  {formFields.map((fieldConfig) => (
                    <div class="theme-horizontal-form-field">
                      {fieldConfig.type === 'textarea' ? (
                        <textarea
                          id={fieldConfig.field === 'message' ? elementIds.messageField : ''}
                          name={fieldConfig.field}
                          placeholder={fieldConfig.placeholder}
                          required={fieldConfig.required}
                          class="theme-horizontal-form-input"
                        ></textarea>
                      ) : (
                        <input
                          type={fieldConfig.type}
                          id={fieldConfig.field === 'name' ? elementIds.nameField : fieldConfig.field === 'email' ? elementIds.emailField : ''}
                          name={fieldConfig.field}
                          placeholder={fieldConfig.placeholder}
                          required={fieldConfig.required}
                          class="theme-horizontal-form-input"
                        />
                      )}
                      
                      <p 
                        id={fieldConfig.field === 'name' ? elementIds.nameError : fieldConfig.field === 'email' ? elementIds.emailError : elementIds.messageError}
                        class="theme-horizontal-form-field-error" 
                        style="display: none;"
                      ></p>
                    </div>
                  ))}
                  
                  <button type="submit" class="theme-horizontal-form-submit" id={elementIds.submitBtn}>
                    {form.buttonText}
                  </button>
                </div>
                
                {}
                <input type="hidden" name="source" value={formSource} />
              </form>
            </div>
          )}
          
        </div>
      );
    })}
  </div>
) : (
  <div class="universal-form-placeholder">
    {}
  </div>
)}

<style>
  .universal-form-placeholder {
    margin: 1rem 0;
  }

  
  @media (max-width: 768px) {
    .universal-forms {
      margin: 1rem -1rem;
    }
    
    .universal-form.placement-between-hero-and-content {
      margin: 1rem -1rem;
      border-radius: 0;
    }
  }
</style>

<script>
  import { actions } from 'astro:actions';

  
  function initializeForm(formElement: HTMLFormElement) {
    const formId = formElement.id;
    const submitBtn = formElement.querySelector('button[type="submit"]') as HTMLButtonElement;
    
    
    const nameError = document.getElementById(formId.replace('-form', '-name-error')) as HTMLElement;
    const emailError = document.getElementById(formId.replace('-form', '-email-error')) as HTMLElement;
    const messageError = document.getElementById(formId.replace('-form', '-message-error')) as HTMLElement;
    const errorMessage = document.getElementById(formId.replace('-form', '-error-message')) as HTMLElement;
    const successMessage = document.getElementById(formId.replace('-form', '-success-message')) as HTMLElement;

    
    function hideMessages() {
      if (errorMessage) errorMessage.style.display = 'none';
      if (successMessage) successMessage.style.display = 'none';
      if (nameError) nameError.style.display = 'none';
      if (emailError) emailError.style.display = 'none';
      if (messageError) messageError.style.display = 'none';
    }

    
    function setLoading(loading: boolean) {
      if (submitBtn) {
        const originalText = submitBtn.dataset.originalText || submitBtn.textContent;
        if (!submitBtn.dataset.originalText) {
          submitBtn.dataset.originalText = originalText || '';
        }
        submitBtn.textContent = loading ? 'Sending...' : originalText;
        submitBtn.disabled = loading;
      }
    }

    formElement.addEventListener('submit', async (event) => {
      event.preventDefault();
      hideMessages();
      setLoading(true);

      try {
        const formData = new FormData(formElement);
        const { data, error } = await actions.leads(formData);
        setLoading(false);

        if (error) {
          
          
          if (error.code === 'BAD_REQUEST' && (error as any).fields) {
            const fields = (error as any).fields;
            if (fields.name && nameError) {
              nameError.textContent = fields.name.join(', ');
              nameError.style.display = 'block';
            }
            if (fields.email && emailError) {
              emailError.textContent = fields.email.join(', ');
              emailError.style.display = 'block';
            }
            if (fields.message && messageError) {
              messageError.textContent = fields.message.join(', ');
              messageError.style.display = 'block';
            }
          } else {
            
            if (errorMessage) errorMessage.style.display = 'block';
          }
        } else {
          
          if (successMessage) {
            successMessage.style.display = 'block';
            successMessage.style.visibility = 'visible';
            formElement.reset();
          }
          
          
          setTimeout(() => {
            if (successMessage) successMessage.style.display = 'none';
          }, 5000);
        }
      } catch (err) {
        setLoading(false);
        if (errorMessage) errorMessage.style.display = 'block';
      }
    });
  }

  
  function initializeForms() {
    const forms = document.querySelectorAll('.universal-form form:not([data-initialized])') as NodeListOf<HTMLFormElement>;
    forms.forEach((form) => {
      form.setAttribute('data-initialized', 'true');
      initializeForm(form);
    });
  }

  
  document.addEventListener('astro:page-load', initializeForms);
  
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeForms);
  } else {
    initializeForms();
  }
</script>