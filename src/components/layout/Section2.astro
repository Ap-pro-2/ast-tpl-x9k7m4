---


import { getAllPosts, getSiteSettings, getCategoriesWithPostCounts } from '../../core/blogLogic';
import { getCollection } from 'astro:content';
import { formatDate } from '../../core/blogLogic';
import OptimizedImage from '../ui/OptimizedImage.astro';
import SimpleBannerAd from '../ads/SimpleBannerAd.astro';
import { getBadgeStyleString } from '../../core/utils/colorUtils';
import { getPostUrl } from '../../core/urlRouting';


const posts = await getAllPosts();
const settings = await getSiteSettings();
const categories = await getCategoriesWithPostCounts();
const allCategories = await getCollection('categories');
const allAuthors = await getCollection('authors');


function getCategoryData(categoryRef: string | { id: string } | undefined) {
  if (!categoryRef) return { name: null, color: 'var(--color-primary)' };
  
  const categoryId = typeof categoryRef === 'string' ? categoryRef : categoryRef.id;
  const category = allCategories.find(cat => cat.data.id === categoryId || cat.id === categoryId);
  return {
    name: category?.data.name || null,
    color: category?.data.color || 'var(--color-primary)'
  };
}


function getAuthorName(authorRef: string | { id: string } | undefined): string {
  if (!authorRef) return 'Author';
  
  const authorId = typeof authorRef === 'string' ? authorRef : authorRef.id;
  const author = allAuthors.find(auth => auth.data.id === authorId || auth.id === authorId);
  return author?.data.name || 'Author';
}


// Check if we have any posts at all
const hasAnyPosts = posts.length > 0;

const politicsCategory = 'business';
const featuredPoliticsPost = hasAnyPosts ? (posts.find(post =>
  (typeof post.data.category === 'string' ? post.data.category : post.data.category?.id) === politicsCategory
) || posts[0]) : null;

const hotSpotPosts = hasAnyPosts && featuredPoliticsPost ? posts
  .filter(post => post.id !== featuredPoliticsPost.id)
  .slice(0, 3) : [];

const topStories = hasAnyPosts && featuredPoliticsPost ? posts
  .filter(post => post.id !== featuredPoliticsPost.id &&
                  !hotSpotPosts.some(hp => hp.id === post.id))
  .slice(0, 5) : [];

const previewPost = hasAnyPosts && featuredPoliticsPost ? (posts.find(post =>
  post.id !== featuredPoliticsPost.id &&
  !hotSpotPosts.some(hp => hp.id === post.id) &&
  !topStories.some(ts => ts.id === post.id)
) || posts[posts.length - 1]) : null;

// Generate URLs for all posts used in this component (only if posts exist)
const featuredPoliticsPostUrl = featuredPoliticsPost ? await getPostUrl(featuredPoliticsPost.id) : '';
const hotSpotPostUrls = hotSpotPosts.length > 0 ? await Promise.all(hotSpotPosts.map(post => getPostUrl(post.id))) : [];
const topStoriesUrls = topStories.length > 0 ? await Promise.all(topStories.map(post => getPostUrl(post.id))) : [];
const previewPostUrl = previewPost ? await getPostUrl(previewPost.id) : '';
---

<section class="magazine-sections py-12 lg:py-16" style="background: var(--bg-primary)">
  <div class="container max-w-7xl">

    {hasAnyPosts ? (
      <div class="magazine-sections-grid">
      
      <div class="magazine-main-column">
        
        {featuredPoliticsPost && (
          <div class="magazine-category-section mb-12">
            <div class="magazine-section-header">
              <div class="magazine-section-line"></div>
              <h2 class="magazine-section-title">
                {getCategoryData(featuredPoliticsPost.data.category).name || 'Featured'}
              </h2>
            </div>

            <article class="magazine-featured-politics">
              <a href={featuredPoliticsPostUrl} class="magazine-politics-link">
              
              {featuredPoliticsPost.data.image?.url && (
                <div class="magazine-politics-image">
                  <OptimizedImage 
                    src={featuredPoliticsPost.data.image.url} 
                    alt={featuredPoliticsPost.data.image.alt || featuredPoliticsPost.data.title}
                    width={400}
                    height={250}
                    class="w-full h-full object-cover"
                  />
                  
                  <div class="magazine-politics-category-overlay">
                    <span class="magazine-politics-category-tag" 
                          style={getBadgeStyleString(getCategoryData(featuredPoliticsPost.data.category).color)}>
                      {(getCategoryData(featuredPoliticsPost.data.category).name || 'Featured').toUpperCase()}
                    </span>
                  </div>
                </div>
              )}
              
              <div class="magazine-politics-content">
                <h3 class="magazine-politics-title">
                  {featuredPoliticsPost.data.title}
                </h3>
                
                {featuredPoliticsPost.data.description && (
                  <p class="magazine-politics-description">
                    {featuredPoliticsPost.data.description}
                  </p>
                )}
                
                <div class="magazine-politics-meta">
                  <span class="magazine-politics-author">By {getAuthorName(featuredPoliticsPost.data.author)}</span>
                  <span class="magazine-meta-separator">•</span>
                  <time datetime={featuredPoliticsPost.data.pubDate.toISOString()}>
                    {formatDate(featuredPoliticsPost.data.pubDate)}
                  </time>
                </div>
                
                <span class="magazine-read-more">READ MORE</span>
              </div>
            </a>
          </article>
        </div>
        )}
        
        {hotSpotPosts.length > 0 && (
          <div class="magazine-category-section">
            <div class="magazine-section-header">
              <div class="magazine-section-line"></div>
              <h2 class="magazine-section-title">Today's Hot Spot</h2>
            </div>

            <div class="magazine-hotspot-grid">
              {hotSpotPosts.map((post, index) => (
              <article class="magazine-hotspot-card">
                <a href={hotSpotPostUrls[index]} class="magazine-hotspot-link">
                  
                  {post.data.image?.url && (
                    <div class="magazine-hotspot-image">
                      <OptimizedImage 
                        src={post.data.image.url} 
                        alt={post.data.image.alt || post.data.title}
                        width={300}
                        height={200}
                        class="w-full h-full object-cover"
                      />
                      
                      <div class="magazine-hotspot-category-overlay">
                        <span class="magazine-hotspot-category-tag" 
                              style={getBadgeStyleString(getCategoryData(post.data.category).color)}>
                          {(getCategoryData(post.data.category).name || 'General').toUpperCase()}
                        </span>
                      </div>
                    </div>
                  )}
                  
                  <div class="magazine-hotspot-content">
                    <h3 class="magazine-hotspot-title">
                      {post.data.title}
                    </h3>
                    
                    <div class="magazine-hotspot-meta">
                      <span class="magazine-hotspot-author">By {getAuthorName(post.data.author)}</span>
                      <span class="magazine-meta-separator">•</span>
                      <time datetime={post.data.pubDate.toISOString()}>
                        {formatDate(post.data.pubDate)}
                      </time>
                    </div>
                  </div>
                </a>
              </article>
            ))}
          </div>

          <div class="magazine-hotspot-ad">
            <SimpleBannerAd
              placement="ad-section-2-horizontal"
              className="magazine-horizontal-ad"
            />
          </div>
        </div>
        )}
      </div>
      
      <div class="magazine-sections-sidebar">
        
        <div class="magazine-ad-unit-sidebar">
          <SimpleBannerAd 
            placement="ad-section-2-sidebar"
            className="magazine-sidebar-ad"
          />
        </div>
        
        {topStories.length > 0 && (
          <div class="magazine-top-stories">
            <div class="magazine-section-header">
              <div class="magazine-section-line"></div>
              <h2 class="magazine-section-title">Top Stories</h2>
            </div>

            <div class="magazine-stories-list">
              {topStories.map((post, index) => (
              <article class="magazine-story-item">
                <a href={topStoriesUrls[index]} class="magazine-story-link">
                  
                  <div class="magazine-story-number">
                    {index + 1}
                  </div>
                  
                  <div class="magazine-story-content">
                    {post.data.image?.url && (
                      <div class="magazine-story-thumbnail">
                        <OptimizedImage 
                          src={post.data.image.url} 
                          alt={post.data.image.alt || post.data.title}
                          width={60}
                          height={60}
                          class="w-full h-full object-cover"
                        />
                      </div>
                    )}
                    
                    <div class="magazine-story-text">
                      <h3 class="magazine-story-title">
                        {post.data.title}
                      </h3>
                      
                      <div class="magazine-story-meta">
                        <time datetime={post.data.pubDate.toISOString()}>
                          {formatDate(post.data.pubDate)}
                        </time>
                      </div>
                    </div>
                  </div>
                </a>
              </article>
            ))}
          </div>
        </div>
        )}
      </div>
    </div>
    ) : (
      <div class="magazine-empty-state">
        <div class="magazine-empty-content">
          <h2 class="magazine-empty-title">No Content Available</h2>
          <p class="magazine-empty-description">
            There are no posts to display at the moment. Check back soon for new content!
          </p>
          <div class="magazine-empty-icon">📄</div>
        </div>
      </div>
    )}
  </div>
</section>

<style>

@media (max-width: 768px) {
  
  .magazine-ad-unit-sidebar {
    display: none;
  }
  
  
  .magazine-hotspot-ad {
    margin: 1.5rem 0;
    text-align: center;
  }
  
  
  .magazine-horizontal-ad {
    max-width: 100%;
    overflow: hidden;
  }
}

@media (max-width: 480px) {

  .magazine-hotspot-ad {
    margin: 1rem -1rem;
  }

  .magazine-horizontal-ad {
    border-radius: 0;
  }
}

.magazine-empty-state {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 40vh;
  padding: 2rem;
}

.magazine-empty-content {
  text-align: center;
  max-width: 500px;
  background: rgba(255, 255, 255, 0.03);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.08);
  border-radius: 16px;
  padding: 2.5rem 2rem;
  box-shadow: 0 4px 24px rgba(0, 0, 0, 0.1);
}

.magazine-empty-title {
  font-size: 1.875rem;
  font-weight: 600;
  color: var(--text-primary);
  margin-bottom: 0.75rem;
}

.magazine-empty-description {
  font-size: 1rem;
  color: var(--text-secondary);
  margin-bottom: 1.5rem;
  line-height: 1.6;
}

.magazine-empty-icon {
  font-size: 2.5rem;
  margin-bottom: 1rem;
  opacity: 0.7;
}

@media (max-width: 768px) {
  .magazine-empty-title {
    font-size: 1.5rem;
  }

  .magazine-empty-description {
    font-size: 0.875rem;
  }

  .magazine-empty-content {
    padding: 2rem 1.5rem;
  }
}
</style>