---
interface Props {
  source?: string;
}

const { source = 'website' } = Astro.props;
---

<div class="theme-horizontal-form-container">
  <div id="horizontal-error-message" class="theme-horizontal-form-error" style="display: none;">
    <p>Unable to save your information. Please try again.</p>
  </div>

  <div id="horizontal-success-message" class="theme-horizontal-form-success" style="display: none;">
    <p>Thank you! Your information has been saved.</p>
  </div>

  <form id="horizontal-newsletter-form" class="theme-horizontal-form">
    <div class="theme-horizontal-form-fields">
      <div class="theme-horizontal-form-group">
        <input
          type="text"
          id="horizontal-name"
          name="name"
          required
          placeholder="Name"
          class="theme-horizontal-form-input"
        />
        <p id="horizontal-name-error" class="theme-horizontal-form-field-error" style="display: none;"></p>
      </div>
      
      <div class="theme-horizontal-form-group">
        <input
          type="email"
          id="horizontal-email"
          name="email"
          required
          placeholder="E-mail"
          class="theme-horizontal-form-input"
        />
        <p id="horizontal-email-error" class="theme-horizontal-form-field-error" style="display: none;"></p>
      </div>
      
      <button type="submit" class="theme-horizontal-form-submit" id="horizontal-submit-btn">
        Submit Now
      </button>
    </div>
    
    <!-- Hidden input for source tracking -->
    <input type="hidden" name="source" value={source} />
  </form>
</div>

<script>
  import { actions } from 'astro:actions';

  const form = document.getElementById('horizontal-newsletter-form') as HTMLFormElement;
  const submitBtn = document.getElementById('horizontal-submit-btn') as HTMLButtonElement;
  const nameInput = document.getElementById('horizontal-name') as HTMLInputElement;
  const emailInput = document.getElementById('horizontal-email') as HTMLInputElement;
  const nameError = document.getElementById('horizontal-name-error') as HTMLParagraphElement;
  const emailError = document.getElementById('horizontal-email-error') as HTMLParagraphElement;
  const errorMessage = document.getElementById('horizontal-error-message') as HTMLDivElement;
  const successMessage = document.getElementById('horizontal-success-message') as HTMLDivElement;

  // Hide all messages initially
  function hideMessages() {
    errorMessage.style.display = 'none';
    successMessage.style.display = 'none';
    nameError.style.display = 'none';
    emailError.style.display = 'none';
  }

  // Show loading state
  function setLoading(loading: boolean) {
    submitBtn.disabled = loading;
    submitBtn.textContent = loading ? 'Submitting...' : 'Submit Now';
  }

  form.addEventListener('submit', async (event) => {
    event.preventDefault();
    hideMessages();
    setLoading(true);

    try {
      const formData = new FormData(form);
      const { data, error } = await actions.leads(formData);

      setLoading(false);

      if (error) {
        console.error('Action error:', error);
        
        // Check for validation errors first
        if (error.code === 'BAD_REQUEST' && error.fields) {
          if (error.fields.name) {
            nameError.textContent = error.fields.name.join(', ');
            nameError.style.display = 'block';
          }
          if (error.fields.email) {
            emailError.textContent = error.fields.email.join(', ');
            emailError.style.display = 'block';
          }
        } else {
          // Show general error message
          errorMessage.style.display = 'block';
        }
      } else {
        console.log('Success:', data);
        // Show success message and reset form
        successMessage.style.display = 'block';
        successMessage.style.visibility = 'visible';
        form.reset();
        
        // Hide success message after 5 seconds
        setTimeout(() => {
          successMessage.style.display = 'none';
        }, 5000);
      }
    } catch (err) {
      console.error('Network error:', err);
      setLoading(false);
      errorMessage.style.display = 'block';
    }
  });
</script>