---
/**
 * Clean Blog Post Card - Simple and Functional
 * Matches the established theme system
 */

import { getEntry } from 'astro:content';
import { formatDate } from '../../core/blogLogic';
import OptimizedImage from '../ui/OptimizedImage.astro';

interface Props {
  title: string;
  url: string;
  description?: string;
  image?: any;
  tags?: any[];
  authorId?: string;
  categoryId?: string;
  post?: any;
}

const { title, url, description, image, tags = [], authorId, categoryId, post } = Astro.props;

// If post is provided, use its data
const postData = post || {
  data: {
    title,
    description,
    image,
    tags,
    author: authorId ? { id: authorId } : null,
    category: categoryId ? { id: categoryId } : null
  },
  id: url.replace('/blog/', '')
};

// Get category data safely
let category = null;
try {
  if (postData.data.category) {
    const categoryId = typeof postData.data.category === 'string' ? postData.data.category : postData.data.category.id;
    category = await getEntry('categories', categoryId);
  }
} catch (error) {
  console.warn('Could not load category:', error);
}

// Handle tags properly
const postTags = postData.data.tags || [];
const tagNames = postTags.map((tag: any) => {
  if (typeof tag === 'string') return tag;
  if (tag?.id) return tag.id;
  if (tag?.data?.name) return tag.data.name;
  return null;
}).filter(Boolean);
---

<article class="theme-card overflow-hidden group">
  
  <!-- Post Image -->
  {postData.data.image?.url && (
    <div class="relative aspect-video overflow-hidden">
      <OptimizedImage 
        src={postData.data.image.url} 
        alt={postData.data.image.alt || postData.data.title}
        width={830}
        height={467}
        loading="lazy"
        class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
      />
      
      <!-- Category Badge -->
      {category && (
        <div class="absolute top-3 left-3">
          <span class="theme-badge">
            {category.data.name}
          </span>
        </div>
      )}
    </div>
  )}
  
  <!-- Post Content -->
  <div class="p-6">
    
    <!-- Meta Information -->
    {postData.data.pubDate && (
      <div class="flex items-center gap-2 text-sm mb-3" style="color: var(--text-muted)">
        <time datetime={postData.data.pubDate.toISOString()}>
          {formatDate(postData.data.pubDate)}
        </time>
        <span>â€¢</span>
        <span>5 min read</span>
      </div>
    )}
    
    <!-- Title -->
    <h3 class="text-xl font-bold mb-3 leading-tight" style="color: var(--text-primary); font-family: var(--font-heading)">
      <a href={url || `/blog/${postData.id}`} 
         style="color: inherit; transition: color var(--animation-duration) var(--animation-easing)"
         onmouseover="this.style.color='var(--text-accent)'"
         onmouseout="this.style.color='var(--text-primary)'">
        {postData.data.title}
      </a>
    </h3>
    
    <!-- Description -->
    {postData.data.description && (
      <p class="mb-4 leading-relaxed" style="color: var(--text-secondary); font-family: var(--font-body)">
        {postData.data.description}
      </p>
    )}
    
    <!-- Tags -->
    {tagNames.length > 0 && (
      <div class="flex flex-wrap gap-2 mb-4">
        {tagNames.slice(0, 3).map((tag: string) => (
          <span class="text-xs px-2 py-1" 
                style="color: var(--text-accent); background: color-mix(in srgb, var(--color-primary) 10%, transparent); border-radius: var(--radius-md)">
            #{tag}
          </span>
        ))}
        {tagNames.length > 3 && (
          <span class="text-xs px-2 py-1" 
                style="color: var(--text-muted); background: var(--bg-tertiary); border-radius: var(--radius-md)">
            +{tagNames.length - 3}
          </span>
        )}
      </div>
    )}
    
    <!-- Read More Button -->
    <div class="mt-auto">
      <a 
        href={url || `/blog/${postData.id}`}
        class="inline-flex items-center gap-2 font-medium text-sm"
        style="color: var(--text-accent); transition: color var(--animation-duration) var(--animation-easing)"
        onmouseover="this.style.color='var(--color-primary-dark)'"
        onmouseout="this.style.color='var(--text-accent)'"
      >
        <span>Read Article</span>
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
        </svg>
      </a>
    </div>
  </div>
</article>