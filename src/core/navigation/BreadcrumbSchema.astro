---

import type { BreadcrumbItem } from './breadcrumbUtils.ts';

export interface Props {
  
  items: BreadcrumbItem[];
  
  baseUrl?: string;
}

const { items, baseUrl = Astro.site?.toString() || 'https://example.com'



const validItems = items.filter(item => {
  
  if (!item.name || typeof item.name !== 'string' || item.name.trim() === '') {
    return false;
  }
  
  
  if (!item.url || item.isCurrentPage) {
    return false;
  }
  
  return true;
});



const breadcrumbListData = {
  "@context": "https://schema.org"
  "@type": "BreadcrumbList",
  "itemListElement": validItems.map((item, index) => {
    
    let itemUrl: string;
    try {
      if (item.url!.startsWith('http://')  || item.url!.startsWith('https://')) {
        itemUrl = item.url!;
      } else {
        itemUrl = new URL(item.url!, baseUrl).toString();
      }
    } catch (error) {
      itemUrl = new URL(item.url!, baseUrl).toString();
    }

    return {
      "@type": "ListItem",
      "position": item.position || (index + 1),
      "name": item.name.trim(),
      "item": itemUrl
    };
  })
};


const shouldRender = validItems.length > 0;


if (shouldRender && process.env.NODE_ENV === 'development') {
  
  const hasValidStructure = breadcrumbListData["@context"] === "https://schema.org" &&
                           breadcrumbListData["@type"] === "BreadcrumbList" &&
                           Array.isArray(breadcrumbListData.itemListElement) &&
                           breadcrumbListData.itemListElement.length > 0;
  
  if (!hasValidStructure) {
  }
  
  
  breadcrumbListData.itemListElement.forEach((item, index) => {
    if (!item.name || !item.item || !item.position) {
    }
  });
}
---

{shouldRender && (
  <script type="application/ld+json" is:inline set:html={JSON.stringify(breadcrumbListData)} />
)}