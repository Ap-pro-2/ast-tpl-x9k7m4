---
export const prerender = true;

import {
  getAllPosts,
  createPaginationData,
  generateBlogListingSEO,
  generateBlogListingSchema,
  getSiteSettings,
  getPageData,
  getCategoriesWithPostCounts,
  formatDate,
  generateExcerpt,
} from "../../core/blogLogic";
import { getCollection } from 'astro:content';
import BaseLayout from "../../layouts/BaseLayout.astro";
import Breadcrumb from "../../components/navigation/Breadcrumb.astro";
import Schema from "../../core/seo/Schema.astro";
import BlogCardHorizontal from "../../components/ui/BlogCardHorizontal.astro";
import { generateBreadcrumbs } from "../../core/navigation/breadcrumbUtils";

// Use core logic
const allPosts = await getAllPosts();
const page = createPaginationData(allPosts, 1, 6);
const settings = await getSiteSettings();
const pageData = await getPageData("blog-main");
const seoData = await generateBlogListingSEO(1, page.lastPage);
const blogListingSchema = await generateBlogListingSchema(page.data, 1);
const breadcrumbs = generateBreadcrumbs("/blog");

// Get categories with post counts for sidebar
const categoriesWithCounts = await getCategoriesWithPostCounts();
const hotCategories = categoriesWithCounts.slice(0, 6); // Top 6 categories

// Get collections for helper functions
const allCategories = await getCollection('categories');
const allAuthors = await getCollection('authors');

// Helper functions
function getCategoryData(categoryRef: string | { id: string } | undefined) {
  if (!categoryRef) return { name: null, color: 'var(--color-primary)' };
  
  const categoryId = typeof categoryRef === 'string' ? categoryRef : categoryRef.id;
  const category = allCategories.find(cat => cat.data.id === categoryId || cat.id === categoryId);
  return {
    name: category?.data.name || null,
    color: category?.data.color || 'var(--color-primary)'
  };
}

function getAuthorName(authorRef: string | { id: string } | undefined): string {
  if (!authorRef) return 'Author';
  
  const authorId = typeof authorRef === 'string' ? authorRef : authorRef.id;
  const author = allAuthors.find(auth => auth.data.id === authorId || auth.id === authorId);
  return author?.data.name || 'Author';
}

// Enhanced SEO data - merge page data with generated SEO
const enhancedSeoData = {
  pageTitle: pageData?.seo?.title || seoData.pageTitle,
  description: pageData?.seo?.description || seoData.description,
  keywords: pageData?.seo?.keywords || [],
  ogImage: pageData?.seo?.ogImage || seoData.ogimage?.url,
  ogImageAlt: "Coffee blog articles and guides",
  canonicalUrl: seoData.canonicalUrl,
  nextUrl: seoData.nextUrl
};
---

<BaseLayout 
  pageTitle={enhancedSeoData.pageTitle} 
  description={enhancedSeoData.description}
  keywords={enhancedSeoData.keywords}
  ogImage={enhancedSeoData.ogImage}
  ogImageAlt={enhancedSeoData.ogImageAlt}
  canonicalUrl={enhancedSeoData.canonicalUrl}
>
  {
    settings.imageDomain && (
      <link rel="preconnect" href={settings.imageDomain} slot="head" />
    )
  }

  <link rel="canonical" href={seoData.canonicalUrl} slot="head" />
  {seoData.nextUrl && <link rel="next" href={seoData.nextUrl} slot="head" />}
  <meta property="og:url" content={seoData.canonicalUrl} slot="head" />
  <Schema item={blogListingSchema} slot="head" />

  <!-- Hero Section -->
  <section class="theme-hero-section py-8 lg:py-12">
    <div class="container max-w-7xl">
      <Breadcrumb items={breadcrumbs} />
      
      <div class="theme-page-header">
        <h1 class="theme-page-title">
          All Articles
        </h1>

        <p class="theme-page-description">
          {
            pageData?.description ||
              "Discover our curated collection of coffee articles, guides, and insights. From expert brewing tips to in-depth equipment reviews."
          }
        </p>
      </div>
    </div>
  </section>

  <!-- Main Blog Content -->
  <section class="py-12 lg:py-16" style="background: var(--bg-primary)">
    <div class="container max-w-7xl">
      
      <!-- Blog Layout - Left: Posts, Right: Sidebar -->
      <div class="blog-page-layout">
        
        <!-- Left Column - Main Posts -->
        <div class="blog-main-column">
          {page.data.map((post, index) => (
            <BlogCardHorizontal post={post} />
          ))}
          
          <!-- Pagination -->
          {page.lastPage > 1 && (
            <div class="blog-pagination">
              <nav class="blog-pagination-nav">
                
                <!-- Previous Page -->
                {page.currentPage > 1 && (
                  <a 
                    href={page.currentPage === 2 ? '/blog' : `/blog/${page.currentPage - 1}`}
                    class="blog-page-btn blog-page-nav"
                  >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                    </svg>
                    <span>Previous</span>
                  </a>
                )}
                
                <!-- Page Numbers -->
                {Array.from({ length: page.lastPage }, (_, i) => i + 1).map((pageNum) => (
                  <a 
                    href={pageNum === 1 ? '/blog' : `/blog/${pageNum}`}
                    class={`blog-page-btn ${pageNum === page.currentPage ? 'active' : ''}`}
                  >
                    {pageNum}
                  </a>
                ))}
                
                <!-- Next Page -->
                {page.currentPage < page.lastPage && (
                  <a 
                    href={`/blog/${page.currentPage + 1}`}
                    class="blog-page-btn blog-page-nav"
                  >
                    <span>Next</span>
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                  </a>
                )}
              </nav>
            </div>
          )}
        </div>
        
        <!-- Right Sidebar -->
        <aside class="blog-sidebar">
          
          <!-- Hot Categories -->
          <div class="blog-sidebar-section">
            <h2 class="blog-sidebar-title">Hot Categories</h2>
            <div class="hot-categories-grid">
              {hotCategories.map((category) => (
                <article class="hot-category-card" 
                         style={`--category-color: ${category.data.color}`}>
                  <a href={`/categories/${category.data.slug}`} class="hot-category-link">
                    <h3 class="hot-category-name">
                      {category.data.name}
                    </h3>
                    <p class="hot-category-desc">
                      {category.data.description}
                    </p>
                    <div class="hot-category-count">
                      {category.postCount} {category.postCount === 1 ? 'article' : 'articles'}
                    </div>
                  </a>
                </article>
              ))}
            </div>
          </div>
          
        </aside>
      </div>
    </div>
  </section>
</BaseLayout>